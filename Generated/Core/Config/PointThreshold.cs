// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Core/Config/PointThreshold.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RabiRiichi.Generated.Core.Config {

  /// <summary>Holder for reflection information generated from Core/Config/PointThreshold.proto</summary>
  public static partial class PointThresholdReflection {

    #region Descriptor
    /// <summary>File descriptor for Core/Config/PointThreshold.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PointThresholdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBDb3JlL0NvbmZpZy9Qb2ludFRocmVzaG9sZC5wcm90byKlAQoRUG9pbnRU",
            "aHJlc2hvbGRNc2cSFgoOaW5pdGlhbF9wb2ludHMYASABKAMSFQoNcmlpY2hp",
            "X3BvaW50cxgCIAEoAxIUCgxob25iYV9wb2ludHMYAyABKAMSFQoNZmluaXNo",
            "X3BvaW50cxgEIAEoAxIYChByeXV1a3lva3VfcG9pbnRzGAUgAygDEhoKEnZh",
            "bGlkX3BvaW50c19yYW5nZRgGIAMoA0IjqgIgUmFiaVJpaWNoaS5HZW5lcmF0",
            "ZWQuQ29yZS5Db25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RabiRiichi.Generated.Core.Config.PointThresholdMsg), global::RabiRiichi.Generated.Core.Config.PointThresholdMsg.Parser, new[]{ "InitialPoints", "RiichiPoints", "HonbaPoints", "FinishPoints", "RyuukyokuPoints", "ValidPointsRange" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PointThresholdMsg : pb::IMessage<PointThresholdMsg> {
    private static readonly pb::MessageParser<PointThresholdMsg> _parser = new pb::MessageParser<PointThresholdMsg>(() => new PointThresholdMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointThresholdMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RabiRiichi.Generated.Core.Config.PointThresholdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointThresholdMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointThresholdMsg(PointThresholdMsg other) : this() {
      initialPoints_ = other.initialPoints_;
      riichiPoints_ = other.riichiPoints_;
      honbaPoints_ = other.honbaPoints_;
      finishPoints_ = other.finishPoints_;
      ryuukyokuPoints_ = other.ryuukyokuPoints_.Clone();
      validPointsRange_ = other.validPointsRange_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointThresholdMsg Clone() {
      return new PointThresholdMsg(this);
    }

    /// <summary>Field number for the "initial_points" field.</summary>
    public const int InitialPointsFieldNumber = 1;
    private long initialPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InitialPoints {
      get { return initialPoints_; }
      set {
        initialPoints_ = value;
      }
    }

    /// <summary>Field number for the "riichi_points" field.</summary>
    public const int RiichiPointsFieldNumber = 2;
    private long riichiPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RiichiPoints {
      get { return riichiPoints_; }
      set {
        riichiPoints_ = value;
      }
    }

    /// <summary>Field number for the "honba_points" field.</summary>
    public const int HonbaPointsFieldNumber = 3;
    private long honbaPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HonbaPoints {
      get { return honbaPoints_; }
      set {
        honbaPoints_ = value;
      }
    }

    /// <summary>Field number for the "finish_points" field.</summary>
    public const int FinishPointsFieldNumber = 4;
    private long finishPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FinishPoints {
      get { return finishPoints_; }
      set {
        finishPoints_ = value;
      }
    }

    /// <summary>Field number for the "ryuukyoku_points" field.</summary>
    public const int RyuukyokuPointsFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_ryuukyokuPoints_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> ryuukyokuPoints_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RyuukyokuPoints {
      get { return ryuukyokuPoints_; }
    }

    /// <summary>Field number for the "valid_points_range" field.</summary>
    public const int ValidPointsRangeFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_validPointsRange_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> validPointsRange_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ValidPointsRange {
      get { return validPointsRange_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointThresholdMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointThresholdMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InitialPoints != other.InitialPoints) return false;
      if (RiichiPoints != other.RiichiPoints) return false;
      if (HonbaPoints != other.HonbaPoints) return false;
      if (FinishPoints != other.FinishPoints) return false;
      if(!ryuukyokuPoints_.Equals(other.ryuukyokuPoints_)) return false;
      if(!validPointsRange_.Equals(other.validPointsRange_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InitialPoints != 0L) hash ^= InitialPoints.GetHashCode();
      if (RiichiPoints != 0L) hash ^= RiichiPoints.GetHashCode();
      if (HonbaPoints != 0L) hash ^= HonbaPoints.GetHashCode();
      if (FinishPoints != 0L) hash ^= FinishPoints.GetHashCode();
      hash ^= ryuukyokuPoints_.GetHashCode();
      hash ^= validPointsRange_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InitialPoints != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(InitialPoints);
      }
      if (RiichiPoints != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RiichiPoints);
      }
      if (HonbaPoints != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(HonbaPoints);
      }
      if (FinishPoints != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FinishPoints);
      }
      ryuukyokuPoints_.WriteTo(output, _repeated_ryuukyokuPoints_codec);
      validPointsRange_.WriteTo(output, _repeated_validPointsRange_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InitialPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InitialPoints);
      }
      if (RiichiPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RiichiPoints);
      }
      if (HonbaPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HonbaPoints);
      }
      if (FinishPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishPoints);
      }
      size += ryuukyokuPoints_.CalculateSize(_repeated_ryuukyokuPoints_codec);
      size += validPointsRange_.CalculateSize(_repeated_validPointsRange_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointThresholdMsg other) {
      if (other == null) {
        return;
      }
      if (other.InitialPoints != 0L) {
        InitialPoints = other.InitialPoints;
      }
      if (other.RiichiPoints != 0L) {
        RiichiPoints = other.RiichiPoints;
      }
      if (other.HonbaPoints != 0L) {
        HonbaPoints = other.HonbaPoints;
      }
      if (other.FinishPoints != 0L) {
        FinishPoints = other.FinishPoints;
      }
      ryuukyokuPoints_.Add(other.ryuukyokuPoints_);
      validPointsRange_.Add(other.validPointsRange_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InitialPoints = input.ReadInt64();
            break;
          }
          case 16: {
            RiichiPoints = input.ReadInt64();
            break;
          }
          case 24: {
            HonbaPoints = input.ReadInt64();
            break;
          }
          case 32: {
            FinishPoints = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            ryuukyokuPoints_.AddEntriesFrom(input, _repeated_ryuukyokuPoints_codec);
            break;
          }
          case 50:
          case 48: {
            validPointsRange_.AddEntriesFrom(input, _repeated_validPointsRange_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
