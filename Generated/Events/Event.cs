// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Events/Event.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RabiRiichi.Generated.Events {

  /// <summary>Holder for reflection information generated from Events/Event.proto</summary>
  public static partial class EventReflection {

    #region Descriptor
    /// <summary>File descriptor for Events/Event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJFdmVudHMvRXZlbnQucHJvdG8aH0V2ZW50cy9JbkdhbWUvQWRkS2FuRXZl",
            "bnQucHJvdG8aIEV2ZW50cy9JbkdhbWUvQWRkVGlsZUV2ZW50LnByb3RvGh5F",
            "dmVudHMvSW5HYW1lL0FnYXJpRXZlbnQucHJvdG8aI0V2ZW50cy9JbkdhbWUv",
            "QXBwbHlTY29yZUV2ZW50LnByb3RvGiJFdmVudHMvSW5HYW1lL0JlZ2luR2Ft",
            "ZUV2ZW50LnByb3RvGiJFdmVudHMvSW5HYW1lL0NhbGNTY29yZUV2ZW50LnBy",
            "b3RvGiJFdmVudHMvSW5HYW1lL0NsYWltVGlsZUV2ZW50LnByb3RvGiVFdmVu",
            "dHMvSW5HYW1lL0NvbmNsdWRlR2FtZUV2ZW50LnByb3RvGihFdmVudHMvSW5H",
            "YW1lL0RlYWxlckZpcnN0VHVybkV2ZW50LnByb3RvGiFFdmVudHMvSW5HYW1l",
            "L0RlYWxIYW5kRXZlbnQucHJvdG8aJEV2ZW50cy9JbkdhbWUvRGlzY2FyZFRp",
            "bGVFdmVudC5wcm90bxohRXZlbnRzL0luR2FtZS9EcmF3VGlsZUV2ZW50LnBy",
            "b3RvGiRFdmVudHMvSW5HYW1lL0luY3JlYXNlSnVuRXZlbnQucHJvdG8aHEV2",
            "ZW50cy9JbkdhbWUvS2FuRXZlbnQucHJvdG8aJkV2ZW50cy9JbkdhbWUvTGF0",
            "ZUNsYWltVGlsZUV2ZW50LnByb3RvGiFFdmVudHMvSW5HYW1lL05leHRHYW1l",
            "RXZlbnQucHJvdG8aI0V2ZW50cy9JbkdhbWUvTmV4dFBsYXllckV2ZW50LnBy",
            "b3RvGiNFdmVudHMvSW5HYW1lL1JldmVhbERvcmFFdmVudC5wcm90bxoiRXZl",
            "bnRzL0luR2FtZS9SeXV1a3lva3VFdmVudC5wcm90bxojRXZlbnRzL0luR2Ft",
            "ZS9TZXRGdXJpdGVuRXZlbnQucHJvdG8aI0V2ZW50cy9JbkdhbWUvU2V0SXBw",
            "YXRzdUV2ZW50LnByb3RvGiJFdmVudHMvSW5HYW1lL1NldE1lbnplbkV2ZW50",
            "LnByb3RvGiJFdmVudHMvSW5HYW1lL1NldFJpaWNoaUV2ZW50LnByb3RvGiFF",
            "dmVudHMvSW5HYW1lL1N0b3BHYW1lRXZlbnQucHJvdG8aJkV2ZW50cy9Jbkdh",
            "bWUvU3luY0dhbWVTdGF0ZUV2ZW50LnByb3RvItEJCghFdmVudE1zZxIoCg1h",
            "ZGRfa2FuX2V2ZW50GAEgASgLMg8uQWRkS2FuRXZlbnRNc2dIABIqCg5hZGRf",
            "dGlsZV9ldmVudBgCIAEoCzIQLkFkZFRpbGVFdmVudE1zZ0gAEiUKC2FnYXJp",
            "X2V2ZW50GAMgASgLMg4uQWdhcmlFdmVudE1zZ0gAEjAKEWFwcGx5X3Njb3Jl",
            "X2V2ZW50GAQgASgLMhMuQXBwbHlTY29yZUV2ZW50TXNnSAASLgoQYmVnaW5f",
            "Z2FtZV9ldmVudBgFIAEoCzISLkJlZ2luR2FtZUV2ZW50TXNnSAASLgoQY2Fs",
            "Y19zY29yZV9ldmVudBgGIAEoCzISLkNhbGNTY29yZUV2ZW50TXNnSAASLgoQ",
            "Y2xhaW1fdGlsZV9ldmVudBgHIAEoCzISLkNsYWltVGlsZUV2ZW50TXNnSAAS",
            "NAoTY29uY2x1ZGVfZ2FtZV9ldmVudBgIIAEoCzIVLkNvbmNsdWRlR2FtZUV2",
            "ZW50TXNnSAASOwoXZGVhbGVyX2ZpcnN0X3R1cm5fZXZlbnQYCSABKAsyGC5E",
            "ZWFsZXJGaXJzdFR1cm5FdmVudE1zZ0gAEiwKD2RlYWxfaGFuZF9ldmVudBgK",
            "IAEoCzIRLkRlYWxIYW5kRXZlbnRNc2dIABIyChJkaXNjYXJkX3RpbGVfZXZl",
            "bnQYCyABKAsyFC5EaXNjYXJkVGlsZUV2ZW50TXNnSAASLAoPZHJhd190aWxl",
            "X2V2ZW50GAwgASgLMhEuRHJhd1RpbGVFdmVudE1zZ0gAEjIKEmluY3JlYXNl",
            "X2p1bl9ldmVudBgNIAEoCzIULkluY3JlYXNlSnVuRXZlbnRNc2dIABIhCglr",
            "YW5fZXZlbnQYDiABKAsyDC5LYW5FdmVudE1zZ0gAEjcKFWxhdGVfY2xhaW1f",
            "dGlsZV9ldmVudBgPIAEoCzIWLkxhdGVDbGFpbVRpbGVFdmVudE1zZ0gAEiwK",
            "D25leHRfZ2FtZV9ldmVudBgQIAEoCzIRLk5leHRHYW1lRXZlbnRNc2dIABIw",
            "ChFuZXh0X3BsYXllcl9ldmVudBgRIAEoCzITLk5leHRQbGF5ZXJFdmVudE1z",
            "Z0gAEjAKEXJldmVhbF9kb3JhX2V2ZW50GBIgASgLMhMuUmV2ZWFsRG9yYUV2",
            "ZW50TXNnSAASLQoPcnl1dWt5b2t1X2V2ZW50GBMgASgLMhIuUnl1dWt5b2t1",
            "RXZlbnRNc2dIABIwChFzZXRfZnVyaXRlbl9ldmVudBgUIAEoCzITLlNldEZ1",
            "cml0ZW5FdmVudE1zZ0gAEjAKEXNldF9pcHBhdHN1X2V2ZW50GBUgASgLMhMu",
            "U2V0SXBwYXRzdUV2ZW50TXNnSAASLgoQc2V0X21lbnplbl9ldmVudBgWIAEo",
            "CzISLlNldE1lbnplbkV2ZW50TXNnSAASLgoQc2V0X3JpaWNoaV9ldmVudBgX",
            "IAEoCzISLlNldFJpaWNoaUV2ZW50TXNnSAASLAoPc3RvcF9nYW1lX2V2ZW50",
            "GBggASgLMhEuU3RvcEdhbWVFdmVudE1zZ0gAEjcKFXN5bmNfZ2FtZV9zdGF0",
            "ZV9ldmVudBgZIAEoCzIWLlN5bmNHYW1lU3RhdGVFdmVudE1zZ0gAQgcKBWV2",
            "ZW50Qh6qAhtSYWJpUmlpY2hpLkdlbmVyYXRlZC5FdmVudHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::RabiRiichi.Generated.Events.InGame.AddKanEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.AddTileEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.AgariEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.ApplyScoreEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.BeginGameEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.CalcScoreEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.ClaimTileEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.ConcludeGameEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.DealerFirstTurnEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.DealHandEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.DiscardTileEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.DrawTileEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.IncreaseJunEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.KanEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.LateClaimTileEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.NextGameEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.NextPlayerEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.RevealDoraEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.RyuukyokuEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.SetFuritenEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.SetIppatsuEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.SetMenzenEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.SetRiichiEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.StopGameEventReflection.Descriptor, global::RabiRiichi.Generated.Events.InGame.SyncGameStateEventReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RabiRiichi.Generated.Events.EventMsg), global::RabiRiichi.Generated.Events.EventMsg.Parser, new[]{ "AddKanEvent", "AddTileEvent", "AgariEvent", "ApplyScoreEvent", "BeginGameEvent", "CalcScoreEvent", "ClaimTileEvent", "ConcludeGameEvent", "DealerFirstTurnEvent", "DealHandEvent", "DiscardTileEvent", "DrawTileEvent", "IncreaseJunEvent", "KanEvent", "LateClaimTileEvent", "NextGameEvent", "NextPlayerEvent", "RevealDoraEvent", "RyuukyokuEvent", "SetFuritenEvent", "SetIppatsuEvent", "SetMenzenEvent", "SetRiichiEvent", "StopGameEvent", "SyncGameStateEvent" }, new[]{ "Event" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EventMsg : pb::IMessage<EventMsg> {
    private static readonly pb::MessageParser<EventMsg> _parser = new pb::MessageParser<EventMsg>(() => new EventMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RabiRiichi.Generated.Events.EventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg(EventMsg other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.AddKanEvent:
          AddKanEvent = other.AddKanEvent.Clone();
          break;
        case EventOneofCase.AddTileEvent:
          AddTileEvent = other.AddTileEvent.Clone();
          break;
        case EventOneofCase.AgariEvent:
          AgariEvent = other.AgariEvent.Clone();
          break;
        case EventOneofCase.ApplyScoreEvent:
          ApplyScoreEvent = other.ApplyScoreEvent.Clone();
          break;
        case EventOneofCase.BeginGameEvent:
          BeginGameEvent = other.BeginGameEvent.Clone();
          break;
        case EventOneofCase.CalcScoreEvent:
          CalcScoreEvent = other.CalcScoreEvent.Clone();
          break;
        case EventOneofCase.ClaimTileEvent:
          ClaimTileEvent = other.ClaimTileEvent.Clone();
          break;
        case EventOneofCase.ConcludeGameEvent:
          ConcludeGameEvent = other.ConcludeGameEvent.Clone();
          break;
        case EventOneofCase.DealerFirstTurnEvent:
          DealerFirstTurnEvent = other.DealerFirstTurnEvent.Clone();
          break;
        case EventOneofCase.DealHandEvent:
          DealHandEvent = other.DealHandEvent.Clone();
          break;
        case EventOneofCase.DiscardTileEvent:
          DiscardTileEvent = other.DiscardTileEvent.Clone();
          break;
        case EventOneofCase.DrawTileEvent:
          DrawTileEvent = other.DrawTileEvent.Clone();
          break;
        case EventOneofCase.IncreaseJunEvent:
          IncreaseJunEvent = other.IncreaseJunEvent.Clone();
          break;
        case EventOneofCase.KanEvent:
          KanEvent = other.KanEvent.Clone();
          break;
        case EventOneofCase.LateClaimTileEvent:
          LateClaimTileEvent = other.LateClaimTileEvent.Clone();
          break;
        case EventOneofCase.NextGameEvent:
          NextGameEvent = other.NextGameEvent.Clone();
          break;
        case EventOneofCase.NextPlayerEvent:
          NextPlayerEvent = other.NextPlayerEvent.Clone();
          break;
        case EventOneofCase.RevealDoraEvent:
          RevealDoraEvent = other.RevealDoraEvent.Clone();
          break;
        case EventOneofCase.RyuukyokuEvent:
          RyuukyokuEvent = other.RyuukyokuEvent.Clone();
          break;
        case EventOneofCase.SetFuritenEvent:
          SetFuritenEvent = other.SetFuritenEvent.Clone();
          break;
        case EventOneofCase.SetIppatsuEvent:
          SetIppatsuEvent = other.SetIppatsuEvent.Clone();
          break;
        case EventOneofCase.SetMenzenEvent:
          SetMenzenEvent = other.SetMenzenEvent.Clone();
          break;
        case EventOneofCase.SetRiichiEvent:
          SetRiichiEvent = other.SetRiichiEvent.Clone();
          break;
        case EventOneofCase.StopGameEvent:
          StopGameEvent = other.StopGameEvent.Clone();
          break;
        case EventOneofCase.SyncGameStateEvent:
          SyncGameStateEvent = other.SyncGameStateEvent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMsg Clone() {
      return new EventMsg(this);
    }

    /// <summary>Field number for the "add_kan_event" field.</summary>
    public const int AddKanEventFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.AddKanEventMsg AddKanEvent {
      get { return eventCase_ == EventOneofCase.AddKanEvent ? (global::RabiRiichi.Generated.Events.InGame.AddKanEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.AddKanEvent;
      }
    }

    /// <summary>Field number for the "add_tile_event" field.</summary>
    public const int AddTileEventFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.AddTileEventMsg AddTileEvent {
      get { return eventCase_ == EventOneofCase.AddTileEvent ? (global::RabiRiichi.Generated.Events.InGame.AddTileEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.AddTileEvent;
      }
    }

    /// <summary>Field number for the "agari_event" field.</summary>
    public const int AgariEventFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.AgariEventMsg AgariEvent {
      get { return eventCase_ == EventOneofCase.AgariEvent ? (global::RabiRiichi.Generated.Events.InGame.AgariEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.AgariEvent;
      }
    }

    /// <summary>Field number for the "apply_score_event" field.</summary>
    public const int ApplyScoreEventFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.ApplyScoreEventMsg ApplyScoreEvent {
      get { return eventCase_ == EventOneofCase.ApplyScoreEvent ? (global::RabiRiichi.Generated.Events.InGame.ApplyScoreEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ApplyScoreEvent;
      }
    }

    /// <summary>Field number for the "begin_game_event" field.</summary>
    public const int BeginGameEventFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.BeginGameEventMsg BeginGameEvent {
      get { return eventCase_ == EventOneofCase.BeginGameEvent ? (global::RabiRiichi.Generated.Events.InGame.BeginGameEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.BeginGameEvent;
      }
    }

    /// <summary>Field number for the "calc_score_event" field.</summary>
    public const int CalcScoreEventFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.CalcScoreEventMsg CalcScoreEvent {
      get { return eventCase_ == EventOneofCase.CalcScoreEvent ? (global::RabiRiichi.Generated.Events.InGame.CalcScoreEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.CalcScoreEvent;
      }
    }

    /// <summary>Field number for the "claim_tile_event" field.</summary>
    public const int ClaimTileEventFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.ClaimTileEventMsg ClaimTileEvent {
      get { return eventCase_ == EventOneofCase.ClaimTileEvent ? (global::RabiRiichi.Generated.Events.InGame.ClaimTileEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ClaimTileEvent;
      }
    }

    /// <summary>Field number for the "conclude_game_event" field.</summary>
    public const int ConcludeGameEventFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.ConcludeGameEventMsg ConcludeGameEvent {
      get { return eventCase_ == EventOneofCase.ConcludeGameEvent ? (global::RabiRiichi.Generated.Events.InGame.ConcludeGameEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ConcludeGameEvent;
      }
    }

    /// <summary>Field number for the "dealer_first_turn_event" field.</summary>
    public const int DealerFirstTurnEventFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.DealerFirstTurnEventMsg DealerFirstTurnEvent {
      get { return eventCase_ == EventOneofCase.DealerFirstTurnEvent ? (global::RabiRiichi.Generated.Events.InGame.DealerFirstTurnEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.DealerFirstTurnEvent;
      }
    }

    /// <summary>Field number for the "deal_hand_event" field.</summary>
    public const int DealHandEventFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.DealHandEventMsg DealHandEvent {
      get { return eventCase_ == EventOneofCase.DealHandEvent ? (global::RabiRiichi.Generated.Events.InGame.DealHandEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.DealHandEvent;
      }
    }

    /// <summary>Field number for the "discard_tile_event" field.</summary>
    public const int DiscardTileEventFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.DiscardTileEventMsg DiscardTileEvent {
      get { return eventCase_ == EventOneofCase.DiscardTileEvent ? (global::RabiRiichi.Generated.Events.InGame.DiscardTileEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.DiscardTileEvent;
      }
    }

    /// <summary>Field number for the "draw_tile_event" field.</summary>
    public const int DrawTileEventFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.DrawTileEventMsg DrawTileEvent {
      get { return eventCase_ == EventOneofCase.DrawTileEvent ? (global::RabiRiichi.Generated.Events.InGame.DrawTileEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.DrawTileEvent;
      }
    }

    /// <summary>Field number for the "increase_jun_event" field.</summary>
    public const int IncreaseJunEventFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.IncreaseJunEventMsg IncreaseJunEvent {
      get { return eventCase_ == EventOneofCase.IncreaseJunEvent ? (global::RabiRiichi.Generated.Events.InGame.IncreaseJunEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.IncreaseJunEvent;
      }
    }

    /// <summary>Field number for the "kan_event" field.</summary>
    public const int KanEventFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.KanEventMsg KanEvent {
      get { return eventCase_ == EventOneofCase.KanEvent ? (global::RabiRiichi.Generated.Events.InGame.KanEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.KanEvent;
      }
    }

    /// <summary>Field number for the "late_claim_tile_event" field.</summary>
    public const int LateClaimTileEventFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.LateClaimTileEventMsg LateClaimTileEvent {
      get { return eventCase_ == EventOneofCase.LateClaimTileEvent ? (global::RabiRiichi.Generated.Events.InGame.LateClaimTileEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.LateClaimTileEvent;
      }
    }

    /// <summary>Field number for the "next_game_event" field.</summary>
    public const int NextGameEventFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.NextGameEventMsg NextGameEvent {
      get { return eventCase_ == EventOneofCase.NextGameEvent ? (global::RabiRiichi.Generated.Events.InGame.NextGameEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.NextGameEvent;
      }
    }

    /// <summary>Field number for the "next_player_event" field.</summary>
    public const int NextPlayerEventFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.NextPlayerEventMsg NextPlayerEvent {
      get { return eventCase_ == EventOneofCase.NextPlayerEvent ? (global::RabiRiichi.Generated.Events.InGame.NextPlayerEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.NextPlayerEvent;
      }
    }

    /// <summary>Field number for the "reveal_dora_event" field.</summary>
    public const int RevealDoraEventFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.RevealDoraEventMsg RevealDoraEvent {
      get { return eventCase_ == EventOneofCase.RevealDoraEvent ? (global::RabiRiichi.Generated.Events.InGame.RevealDoraEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.RevealDoraEvent;
      }
    }

    /// <summary>Field number for the "ryuukyoku_event" field.</summary>
    public const int RyuukyokuEventFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.RyuukyokuEventMsg RyuukyokuEvent {
      get { return eventCase_ == EventOneofCase.RyuukyokuEvent ? (global::RabiRiichi.Generated.Events.InGame.RyuukyokuEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.RyuukyokuEvent;
      }
    }

    /// <summary>Field number for the "set_furiten_event" field.</summary>
    public const int SetFuritenEventFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.SetFuritenEventMsg SetFuritenEvent {
      get { return eventCase_ == EventOneofCase.SetFuritenEvent ? (global::RabiRiichi.Generated.Events.InGame.SetFuritenEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SetFuritenEvent;
      }
    }

    /// <summary>Field number for the "set_ippatsu_event" field.</summary>
    public const int SetIppatsuEventFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.SetIppatsuEventMsg SetIppatsuEvent {
      get { return eventCase_ == EventOneofCase.SetIppatsuEvent ? (global::RabiRiichi.Generated.Events.InGame.SetIppatsuEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SetIppatsuEvent;
      }
    }

    /// <summary>Field number for the "set_menzen_event" field.</summary>
    public const int SetMenzenEventFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.SetMenzenEventMsg SetMenzenEvent {
      get { return eventCase_ == EventOneofCase.SetMenzenEvent ? (global::RabiRiichi.Generated.Events.InGame.SetMenzenEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SetMenzenEvent;
      }
    }

    /// <summary>Field number for the "set_riichi_event" field.</summary>
    public const int SetRiichiEventFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.SetRiichiEventMsg SetRiichiEvent {
      get { return eventCase_ == EventOneofCase.SetRiichiEvent ? (global::RabiRiichi.Generated.Events.InGame.SetRiichiEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SetRiichiEvent;
      }
    }

    /// <summary>Field number for the "stop_game_event" field.</summary>
    public const int StopGameEventFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.StopGameEventMsg StopGameEvent {
      get { return eventCase_ == EventOneofCase.StopGameEvent ? (global::RabiRiichi.Generated.Events.InGame.StopGameEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.StopGameEvent;
      }
    }

    /// <summary>Field number for the "sync_game_state_event" field.</summary>
    public const int SyncGameStateEventFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Events.InGame.SyncGameStateEventMsg SyncGameStateEvent {
      get { return eventCase_ == EventOneofCase.SyncGameStateEvent ? (global::RabiRiichi.Generated.Events.InGame.SyncGameStateEventMsg) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SyncGameStateEvent;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      AddKanEvent = 1,
      AddTileEvent = 2,
      AgariEvent = 3,
      ApplyScoreEvent = 4,
      BeginGameEvent = 5,
      CalcScoreEvent = 6,
      ClaimTileEvent = 7,
      ConcludeGameEvent = 8,
      DealerFirstTurnEvent = 9,
      DealHandEvent = 10,
      DiscardTileEvent = 11,
      DrawTileEvent = 12,
      IncreaseJunEvent = 13,
      KanEvent = 14,
      LateClaimTileEvent = 15,
      NextGameEvent = 16,
      NextPlayerEvent = 17,
      RevealDoraEvent = 18,
      RyuukyokuEvent = 19,
      SetFuritenEvent = 20,
      SetIppatsuEvent = 21,
      SetMenzenEvent = 22,
      SetRiichiEvent = 23,
      StopGameEvent = 24,
      SyncGameStateEvent = 25,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AddKanEvent, other.AddKanEvent)) return false;
      if (!object.Equals(AddTileEvent, other.AddTileEvent)) return false;
      if (!object.Equals(AgariEvent, other.AgariEvent)) return false;
      if (!object.Equals(ApplyScoreEvent, other.ApplyScoreEvent)) return false;
      if (!object.Equals(BeginGameEvent, other.BeginGameEvent)) return false;
      if (!object.Equals(CalcScoreEvent, other.CalcScoreEvent)) return false;
      if (!object.Equals(ClaimTileEvent, other.ClaimTileEvent)) return false;
      if (!object.Equals(ConcludeGameEvent, other.ConcludeGameEvent)) return false;
      if (!object.Equals(DealerFirstTurnEvent, other.DealerFirstTurnEvent)) return false;
      if (!object.Equals(DealHandEvent, other.DealHandEvent)) return false;
      if (!object.Equals(DiscardTileEvent, other.DiscardTileEvent)) return false;
      if (!object.Equals(DrawTileEvent, other.DrawTileEvent)) return false;
      if (!object.Equals(IncreaseJunEvent, other.IncreaseJunEvent)) return false;
      if (!object.Equals(KanEvent, other.KanEvent)) return false;
      if (!object.Equals(LateClaimTileEvent, other.LateClaimTileEvent)) return false;
      if (!object.Equals(NextGameEvent, other.NextGameEvent)) return false;
      if (!object.Equals(NextPlayerEvent, other.NextPlayerEvent)) return false;
      if (!object.Equals(RevealDoraEvent, other.RevealDoraEvent)) return false;
      if (!object.Equals(RyuukyokuEvent, other.RyuukyokuEvent)) return false;
      if (!object.Equals(SetFuritenEvent, other.SetFuritenEvent)) return false;
      if (!object.Equals(SetIppatsuEvent, other.SetIppatsuEvent)) return false;
      if (!object.Equals(SetMenzenEvent, other.SetMenzenEvent)) return false;
      if (!object.Equals(SetRiichiEvent, other.SetRiichiEvent)) return false;
      if (!object.Equals(StopGameEvent, other.StopGameEvent)) return false;
      if (!object.Equals(SyncGameStateEvent, other.SyncGameStateEvent)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.AddKanEvent) hash ^= AddKanEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.AddTileEvent) hash ^= AddTileEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.AgariEvent) hash ^= AgariEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.ApplyScoreEvent) hash ^= ApplyScoreEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.BeginGameEvent) hash ^= BeginGameEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.CalcScoreEvent) hash ^= CalcScoreEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.ClaimTileEvent) hash ^= ClaimTileEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.ConcludeGameEvent) hash ^= ConcludeGameEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.DealerFirstTurnEvent) hash ^= DealerFirstTurnEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.DealHandEvent) hash ^= DealHandEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.DiscardTileEvent) hash ^= DiscardTileEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.DrawTileEvent) hash ^= DrawTileEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.IncreaseJunEvent) hash ^= IncreaseJunEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.KanEvent) hash ^= KanEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.LateClaimTileEvent) hash ^= LateClaimTileEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.NextGameEvent) hash ^= NextGameEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.NextPlayerEvent) hash ^= NextPlayerEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.RevealDoraEvent) hash ^= RevealDoraEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.RyuukyokuEvent) hash ^= RyuukyokuEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.SetFuritenEvent) hash ^= SetFuritenEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.SetIppatsuEvent) hash ^= SetIppatsuEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.SetMenzenEvent) hash ^= SetMenzenEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.SetRiichiEvent) hash ^= SetRiichiEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.StopGameEvent) hash ^= StopGameEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.SyncGameStateEvent) hash ^= SyncGameStateEvent.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.AddKanEvent) {
        output.WriteRawTag(10);
        output.WriteMessage(AddKanEvent);
      }
      if (eventCase_ == EventOneofCase.AddTileEvent) {
        output.WriteRawTag(18);
        output.WriteMessage(AddTileEvent);
      }
      if (eventCase_ == EventOneofCase.AgariEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(AgariEvent);
      }
      if (eventCase_ == EventOneofCase.ApplyScoreEvent) {
        output.WriteRawTag(34);
        output.WriteMessage(ApplyScoreEvent);
      }
      if (eventCase_ == EventOneofCase.BeginGameEvent) {
        output.WriteRawTag(42);
        output.WriteMessage(BeginGameEvent);
      }
      if (eventCase_ == EventOneofCase.CalcScoreEvent) {
        output.WriteRawTag(50);
        output.WriteMessage(CalcScoreEvent);
      }
      if (eventCase_ == EventOneofCase.ClaimTileEvent) {
        output.WriteRawTag(58);
        output.WriteMessage(ClaimTileEvent);
      }
      if (eventCase_ == EventOneofCase.ConcludeGameEvent) {
        output.WriteRawTag(66);
        output.WriteMessage(ConcludeGameEvent);
      }
      if (eventCase_ == EventOneofCase.DealerFirstTurnEvent) {
        output.WriteRawTag(74);
        output.WriteMessage(DealerFirstTurnEvent);
      }
      if (eventCase_ == EventOneofCase.DealHandEvent) {
        output.WriteRawTag(82);
        output.WriteMessage(DealHandEvent);
      }
      if (eventCase_ == EventOneofCase.DiscardTileEvent) {
        output.WriteRawTag(90);
        output.WriteMessage(DiscardTileEvent);
      }
      if (eventCase_ == EventOneofCase.DrawTileEvent) {
        output.WriteRawTag(98);
        output.WriteMessage(DrawTileEvent);
      }
      if (eventCase_ == EventOneofCase.IncreaseJunEvent) {
        output.WriteRawTag(106);
        output.WriteMessage(IncreaseJunEvent);
      }
      if (eventCase_ == EventOneofCase.KanEvent) {
        output.WriteRawTag(114);
        output.WriteMessage(KanEvent);
      }
      if (eventCase_ == EventOneofCase.LateClaimTileEvent) {
        output.WriteRawTag(122);
        output.WriteMessage(LateClaimTileEvent);
      }
      if (eventCase_ == EventOneofCase.NextGameEvent) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(NextGameEvent);
      }
      if (eventCase_ == EventOneofCase.NextPlayerEvent) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(NextPlayerEvent);
      }
      if (eventCase_ == EventOneofCase.RevealDoraEvent) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(RevealDoraEvent);
      }
      if (eventCase_ == EventOneofCase.RyuukyokuEvent) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(RyuukyokuEvent);
      }
      if (eventCase_ == EventOneofCase.SetFuritenEvent) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SetFuritenEvent);
      }
      if (eventCase_ == EventOneofCase.SetIppatsuEvent) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SetIppatsuEvent);
      }
      if (eventCase_ == EventOneofCase.SetMenzenEvent) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(SetMenzenEvent);
      }
      if (eventCase_ == EventOneofCase.SetRiichiEvent) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SetRiichiEvent);
      }
      if (eventCase_ == EventOneofCase.StopGameEvent) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(StopGameEvent);
      }
      if (eventCase_ == EventOneofCase.SyncGameStateEvent) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(SyncGameStateEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.AddKanEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddKanEvent);
      }
      if (eventCase_ == EventOneofCase.AddTileEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddTileEvent);
      }
      if (eventCase_ == EventOneofCase.AgariEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AgariEvent);
      }
      if (eventCase_ == EventOneofCase.ApplyScoreEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplyScoreEvent);
      }
      if (eventCase_ == EventOneofCase.BeginGameEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeginGameEvent);
      }
      if (eventCase_ == EventOneofCase.CalcScoreEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CalcScoreEvent);
      }
      if (eventCase_ == EventOneofCase.ClaimTileEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimTileEvent);
      }
      if (eventCase_ == EventOneofCase.ConcludeGameEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConcludeGameEvent);
      }
      if (eventCase_ == EventOneofCase.DealerFirstTurnEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DealerFirstTurnEvent);
      }
      if (eventCase_ == EventOneofCase.DealHandEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DealHandEvent);
      }
      if (eventCase_ == EventOneofCase.DiscardTileEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscardTileEvent);
      }
      if (eventCase_ == EventOneofCase.DrawTileEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawTileEvent);
      }
      if (eventCase_ == EventOneofCase.IncreaseJunEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncreaseJunEvent);
      }
      if (eventCase_ == EventOneofCase.KanEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KanEvent);
      }
      if (eventCase_ == EventOneofCase.LateClaimTileEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LateClaimTileEvent);
      }
      if (eventCase_ == EventOneofCase.NextGameEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NextGameEvent);
      }
      if (eventCase_ == EventOneofCase.NextPlayerEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NextPlayerEvent);
      }
      if (eventCase_ == EventOneofCase.RevealDoraEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RevealDoraEvent);
      }
      if (eventCase_ == EventOneofCase.RyuukyokuEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RyuukyokuEvent);
      }
      if (eventCase_ == EventOneofCase.SetFuritenEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetFuritenEvent);
      }
      if (eventCase_ == EventOneofCase.SetIppatsuEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetIppatsuEvent);
      }
      if (eventCase_ == EventOneofCase.SetMenzenEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetMenzenEvent);
      }
      if (eventCase_ == EventOneofCase.SetRiichiEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetRiichiEvent);
      }
      if (eventCase_ == EventOneofCase.StopGameEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StopGameEvent);
      }
      if (eventCase_ == EventOneofCase.SyncGameStateEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SyncGameStateEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMsg other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.AddKanEvent:
          if (AddKanEvent == null) {
            AddKanEvent = new global::RabiRiichi.Generated.Events.InGame.AddKanEventMsg();
          }
          AddKanEvent.MergeFrom(other.AddKanEvent);
          break;
        case EventOneofCase.AddTileEvent:
          if (AddTileEvent == null) {
            AddTileEvent = new global::RabiRiichi.Generated.Events.InGame.AddTileEventMsg();
          }
          AddTileEvent.MergeFrom(other.AddTileEvent);
          break;
        case EventOneofCase.AgariEvent:
          if (AgariEvent == null) {
            AgariEvent = new global::RabiRiichi.Generated.Events.InGame.AgariEventMsg();
          }
          AgariEvent.MergeFrom(other.AgariEvent);
          break;
        case EventOneofCase.ApplyScoreEvent:
          if (ApplyScoreEvent == null) {
            ApplyScoreEvent = new global::RabiRiichi.Generated.Events.InGame.ApplyScoreEventMsg();
          }
          ApplyScoreEvent.MergeFrom(other.ApplyScoreEvent);
          break;
        case EventOneofCase.BeginGameEvent:
          if (BeginGameEvent == null) {
            BeginGameEvent = new global::RabiRiichi.Generated.Events.InGame.BeginGameEventMsg();
          }
          BeginGameEvent.MergeFrom(other.BeginGameEvent);
          break;
        case EventOneofCase.CalcScoreEvent:
          if (CalcScoreEvent == null) {
            CalcScoreEvent = new global::RabiRiichi.Generated.Events.InGame.CalcScoreEventMsg();
          }
          CalcScoreEvent.MergeFrom(other.CalcScoreEvent);
          break;
        case EventOneofCase.ClaimTileEvent:
          if (ClaimTileEvent == null) {
            ClaimTileEvent = new global::RabiRiichi.Generated.Events.InGame.ClaimTileEventMsg();
          }
          ClaimTileEvent.MergeFrom(other.ClaimTileEvent);
          break;
        case EventOneofCase.ConcludeGameEvent:
          if (ConcludeGameEvent == null) {
            ConcludeGameEvent = new global::RabiRiichi.Generated.Events.InGame.ConcludeGameEventMsg();
          }
          ConcludeGameEvent.MergeFrom(other.ConcludeGameEvent);
          break;
        case EventOneofCase.DealerFirstTurnEvent:
          if (DealerFirstTurnEvent == null) {
            DealerFirstTurnEvent = new global::RabiRiichi.Generated.Events.InGame.DealerFirstTurnEventMsg();
          }
          DealerFirstTurnEvent.MergeFrom(other.DealerFirstTurnEvent);
          break;
        case EventOneofCase.DealHandEvent:
          if (DealHandEvent == null) {
            DealHandEvent = new global::RabiRiichi.Generated.Events.InGame.DealHandEventMsg();
          }
          DealHandEvent.MergeFrom(other.DealHandEvent);
          break;
        case EventOneofCase.DiscardTileEvent:
          if (DiscardTileEvent == null) {
            DiscardTileEvent = new global::RabiRiichi.Generated.Events.InGame.DiscardTileEventMsg();
          }
          DiscardTileEvent.MergeFrom(other.DiscardTileEvent);
          break;
        case EventOneofCase.DrawTileEvent:
          if (DrawTileEvent == null) {
            DrawTileEvent = new global::RabiRiichi.Generated.Events.InGame.DrawTileEventMsg();
          }
          DrawTileEvent.MergeFrom(other.DrawTileEvent);
          break;
        case EventOneofCase.IncreaseJunEvent:
          if (IncreaseJunEvent == null) {
            IncreaseJunEvent = new global::RabiRiichi.Generated.Events.InGame.IncreaseJunEventMsg();
          }
          IncreaseJunEvent.MergeFrom(other.IncreaseJunEvent);
          break;
        case EventOneofCase.KanEvent:
          if (KanEvent == null) {
            KanEvent = new global::RabiRiichi.Generated.Events.InGame.KanEventMsg();
          }
          KanEvent.MergeFrom(other.KanEvent);
          break;
        case EventOneofCase.LateClaimTileEvent:
          if (LateClaimTileEvent == null) {
            LateClaimTileEvent = new global::RabiRiichi.Generated.Events.InGame.LateClaimTileEventMsg();
          }
          LateClaimTileEvent.MergeFrom(other.LateClaimTileEvent);
          break;
        case EventOneofCase.NextGameEvent:
          if (NextGameEvent == null) {
            NextGameEvent = new global::RabiRiichi.Generated.Events.InGame.NextGameEventMsg();
          }
          NextGameEvent.MergeFrom(other.NextGameEvent);
          break;
        case EventOneofCase.NextPlayerEvent:
          if (NextPlayerEvent == null) {
            NextPlayerEvent = new global::RabiRiichi.Generated.Events.InGame.NextPlayerEventMsg();
          }
          NextPlayerEvent.MergeFrom(other.NextPlayerEvent);
          break;
        case EventOneofCase.RevealDoraEvent:
          if (RevealDoraEvent == null) {
            RevealDoraEvent = new global::RabiRiichi.Generated.Events.InGame.RevealDoraEventMsg();
          }
          RevealDoraEvent.MergeFrom(other.RevealDoraEvent);
          break;
        case EventOneofCase.RyuukyokuEvent:
          if (RyuukyokuEvent == null) {
            RyuukyokuEvent = new global::RabiRiichi.Generated.Events.InGame.RyuukyokuEventMsg();
          }
          RyuukyokuEvent.MergeFrom(other.RyuukyokuEvent);
          break;
        case EventOneofCase.SetFuritenEvent:
          if (SetFuritenEvent == null) {
            SetFuritenEvent = new global::RabiRiichi.Generated.Events.InGame.SetFuritenEventMsg();
          }
          SetFuritenEvent.MergeFrom(other.SetFuritenEvent);
          break;
        case EventOneofCase.SetIppatsuEvent:
          if (SetIppatsuEvent == null) {
            SetIppatsuEvent = new global::RabiRiichi.Generated.Events.InGame.SetIppatsuEventMsg();
          }
          SetIppatsuEvent.MergeFrom(other.SetIppatsuEvent);
          break;
        case EventOneofCase.SetMenzenEvent:
          if (SetMenzenEvent == null) {
            SetMenzenEvent = new global::RabiRiichi.Generated.Events.InGame.SetMenzenEventMsg();
          }
          SetMenzenEvent.MergeFrom(other.SetMenzenEvent);
          break;
        case EventOneofCase.SetRiichiEvent:
          if (SetRiichiEvent == null) {
            SetRiichiEvent = new global::RabiRiichi.Generated.Events.InGame.SetRiichiEventMsg();
          }
          SetRiichiEvent.MergeFrom(other.SetRiichiEvent);
          break;
        case EventOneofCase.StopGameEvent:
          if (StopGameEvent == null) {
            StopGameEvent = new global::RabiRiichi.Generated.Events.InGame.StopGameEventMsg();
          }
          StopGameEvent.MergeFrom(other.StopGameEvent);
          break;
        case EventOneofCase.SyncGameStateEvent:
          if (SyncGameStateEvent == null) {
            SyncGameStateEvent = new global::RabiRiichi.Generated.Events.InGame.SyncGameStateEventMsg();
          }
          SyncGameStateEvent.MergeFrom(other.SyncGameStateEvent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::RabiRiichi.Generated.Events.InGame.AddKanEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.AddKanEventMsg();
            if (eventCase_ == EventOneofCase.AddKanEvent) {
              subBuilder.MergeFrom(AddKanEvent);
            }
            input.ReadMessage(subBuilder);
            AddKanEvent = subBuilder;
            break;
          }
          case 18: {
            global::RabiRiichi.Generated.Events.InGame.AddTileEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.AddTileEventMsg();
            if (eventCase_ == EventOneofCase.AddTileEvent) {
              subBuilder.MergeFrom(AddTileEvent);
            }
            input.ReadMessage(subBuilder);
            AddTileEvent = subBuilder;
            break;
          }
          case 26: {
            global::RabiRiichi.Generated.Events.InGame.AgariEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.AgariEventMsg();
            if (eventCase_ == EventOneofCase.AgariEvent) {
              subBuilder.MergeFrom(AgariEvent);
            }
            input.ReadMessage(subBuilder);
            AgariEvent = subBuilder;
            break;
          }
          case 34: {
            global::RabiRiichi.Generated.Events.InGame.ApplyScoreEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.ApplyScoreEventMsg();
            if (eventCase_ == EventOneofCase.ApplyScoreEvent) {
              subBuilder.MergeFrom(ApplyScoreEvent);
            }
            input.ReadMessage(subBuilder);
            ApplyScoreEvent = subBuilder;
            break;
          }
          case 42: {
            global::RabiRiichi.Generated.Events.InGame.BeginGameEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.BeginGameEventMsg();
            if (eventCase_ == EventOneofCase.BeginGameEvent) {
              subBuilder.MergeFrom(BeginGameEvent);
            }
            input.ReadMessage(subBuilder);
            BeginGameEvent = subBuilder;
            break;
          }
          case 50: {
            global::RabiRiichi.Generated.Events.InGame.CalcScoreEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.CalcScoreEventMsg();
            if (eventCase_ == EventOneofCase.CalcScoreEvent) {
              subBuilder.MergeFrom(CalcScoreEvent);
            }
            input.ReadMessage(subBuilder);
            CalcScoreEvent = subBuilder;
            break;
          }
          case 58: {
            global::RabiRiichi.Generated.Events.InGame.ClaimTileEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.ClaimTileEventMsg();
            if (eventCase_ == EventOneofCase.ClaimTileEvent) {
              subBuilder.MergeFrom(ClaimTileEvent);
            }
            input.ReadMessage(subBuilder);
            ClaimTileEvent = subBuilder;
            break;
          }
          case 66: {
            global::RabiRiichi.Generated.Events.InGame.ConcludeGameEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.ConcludeGameEventMsg();
            if (eventCase_ == EventOneofCase.ConcludeGameEvent) {
              subBuilder.MergeFrom(ConcludeGameEvent);
            }
            input.ReadMessage(subBuilder);
            ConcludeGameEvent = subBuilder;
            break;
          }
          case 74: {
            global::RabiRiichi.Generated.Events.InGame.DealerFirstTurnEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.DealerFirstTurnEventMsg();
            if (eventCase_ == EventOneofCase.DealerFirstTurnEvent) {
              subBuilder.MergeFrom(DealerFirstTurnEvent);
            }
            input.ReadMessage(subBuilder);
            DealerFirstTurnEvent = subBuilder;
            break;
          }
          case 82: {
            global::RabiRiichi.Generated.Events.InGame.DealHandEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.DealHandEventMsg();
            if (eventCase_ == EventOneofCase.DealHandEvent) {
              subBuilder.MergeFrom(DealHandEvent);
            }
            input.ReadMessage(subBuilder);
            DealHandEvent = subBuilder;
            break;
          }
          case 90: {
            global::RabiRiichi.Generated.Events.InGame.DiscardTileEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.DiscardTileEventMsg();
            if (eventCase_ == EventOneofCase.DiscardTileEvent) {
              subBuilder.MergeFrom(DiscardTileEvent);
            }
            input.ReadMessage(subBuilder);
            DiscardTileEvent = subBuilder;
            break;
          }
          case 98: {
            global::RabiRiichi.Generated.Events.InGame.DrawTileEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.DrawTileEventMsg();
            if (eventCase_ == EventOneofCase.DrawTileEvent) {
              subBuilder.MergeFrom(DrawTileEvent);
            }
            input.ReadMessage(subBuilder);
            DrawTileEvent = subBuilder;
            break;
          }
          case 106: {
            global::RabiRiichi.Generated.Events.InGame.IncreaseJunEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.IncreaseJunEventMsg();
            if (eventCase_ == EventOneofCase.IncreaseJunEvent) {
              subBuilder.MergeFrom(IncreaseJunEvent);
            }
            input.ReadMessage(subBuilder);
            IncreaseJunEvent = subBuilder;
            break;
          }
          case 114: {
            global::RabiRiichi.Generated.Events.InGame.KanEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.KanEventMsg();
            if (eventCase_ == EventOneofCase.KanEvent) {
              subBuilder.MergeFrom(KanEvent);
            }
            input.ReadMessage(subBuilder);
            KanEvent = subBuilder;
            break;
          }
          case 122: {
            global::RabiRiichi.Generated.Events.InGame.LateClaimTileEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.LateClaimTileEventMsg();
            if (eventCase_ == EventOneofCase.LateClaimTileEvent) {
              subBuilder.MergeFrom(LateClaimTileEvent);
            }
            input.ReadMessage(subBuilder);
            LateClaimTileEvent = subBuilder;
            break;
          }
          case 130: {
            global::RabiRiichi.Generated.Events.InGame.NextGameEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.NextGameEventMsg();
            if (eventCase_ == EventOneofCase.NextGameEvent) {
              subBuilder.MergeFrom(NextGameEvent);
            }
            input.ReadMessage(subBuilder);
            NextGameEvent = subBuilder;
            break;
          }
          case 138: {
            global::RabiRiichi.Generated.Events.InGame.NextPlayerEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.NextPlayerEventMsg();
            if (eventCase_ == EventOneofCase.NextPlayerEvent) {
              subBuilder.MergeFrom(NextPlayerEvent);
            }
            input.ReadMessage(subBuilder);
            NextPlayerEvent = subBuilder;
            break;
          }
          case 146: {
            global::RabiRiichi.Generated.Events.InGame.RevealDoraEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.RevealDoraEventMsg();
            if (eventCase_ == EventOneofCase.RevealDoraEvent) {
              subBuilder.MergeFrom(RevealDoraEvent);
            }
            input.ReadMessage(subBuilder);
            RevealDoraEvent = subBuilder;
            break;
          }
          case 154: {
            global::RabiRiichi.Generated.Events.InGame.RyuukyokuEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.RyuukyokuEventMsg();
            if (eventCase_ == EventOneofCase.RyuukyokuEvent) {
              subBuilder.MergeFrom(RyuukyokuEvent);
            }
            input.ReadMessage(subBuilder);
            RyuukyokuEvent = subBuilder;
            break;
          }
          case 162: {
            global::RabiRiichi.Generated.Events.InGame.SetFuritenEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.SetFuritenEventMsg();
            if (eventCase_ == EventOneofCase.SetFuritenEvent) {
              subBuilder.MergeFrom(SetFuritenEvent);
            }
            input.ReadMessage(subBuilder);
            SetFuritenEvent = subBuilder;
            break;
          }
          case 170: {
            global::RabiRiichi.Generated.Events.InGame.SetIppatsuEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.SetIppatsuEventMsg();
            if (eventCase_ == EventOneofCase.SetIppatsuEvent) {
              subBuilder.MergeFrom(SetIppatsuEvent);
            }
            input.ReadMessage(subBuilder);
            SetIppatsuEvent = subBuilder;
            break;
          }
          case 178: {
            global::RabiRiichi.Generated.Events.InGame.SetMenzenEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.SetMenzenEventMsg();
            if (eventCase_ == EventOneofCase.SetMenzenEvent) {
              subBuilder.MergeFrom(SetMenzenEvent);
            }
            input.ReadMessage(subBuilder);
            SetMenzenEvent = subBuilder;
            break;
          }
          case 186: {
            global::RabiRiichi.Generated.Events.InGame.SetRiichiEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.SetRiichiEventMsg();
            if (eventCase_ == EventOneofCase.SetRiichiEvent) {
              subBuilder.MergeFrom(SetRiichiEvent);
            }
            input.ReadMessage(subBuilder);
            SetRiichiEvent = subBuilder;
            break;
          }
          case 194: {
            global::RabiRiichi.Generated.Events.InGame.StopGameEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.StopGameEventMsg();
            if (eventCase_ == EventOneofCase.StopGameEvent) {
              subBuilder.MergeFrom(StopGameEvent);
            }
            input.ReadMessage(subBuilder);
            StopGameEvent = subBuilder;
            break;
          }
          case 202: {
            global::RabiRiichi.Generated.Events.InGame.SyncGameStateEventMsg subBuilder = new global::RabiRiichi.Generated.Events.InGame.SyncGameStateEventMsg();
            if (eventCase_ == EventOneofCase.SyncGameStateEvent) {
              subBuilder.MergeFrom(SyncGameStateEvent);
            }
            input.ReadMessage(subBuilder);
            SyncGameStateEvent = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
