// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Events/InGame/SetRiichiEvent.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RabiRiichi.Generated.Events.InGame {

  /// <summary>Holder for reflection information generated from Events/InGame/SetRiichiEvent.proto</summary>
  public static partial class SetRiichiEventReflection {

    #region Descriptor
    /// <summary>File descriptor for Events/InGame/SetRiichiEvent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SetRiichiEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJFdmVudHMvSW5HYW1lL1NldFJpaWNoaUV2ZW50LnByb3RvGhNDb3JlL0dh",
            "bWVUaWxlLnByb3RvIlsKEVNldFJpaWNoaUV2ZW50TXNnEhEKCXBsYXllcl9p",
            "ZBgBIAEoBRIhCgtyaWljaGlfdGlsZRgCIAEoCzIMLkdhbWVUaWxlTXNnEhAK",
            "CHdfcmlpY2hpGAMgASgIQiWqAiJSYWJpUmlpY2hpLkdlbmVyYXRlZC5FdmVu",
            "dHMuSW5HYW1lYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::RabiRiichi.Generated.Core.GameTileReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RabiRiichi.Generated.Events.InGame.SetRiichiEventMsg), global::RabiRiichi.Generated.Events.InGame.SetRiichiEventMsg.Parser, new[]{ "PlayerId", "RiichiTile", "WRiichi" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SetRiichiEventMsg : pb::IMessage<SetRiichiEventMsg> {
    private static readonly pb::MessageParser<SetRiichiEventMsg> _parser = new pb::MessageParser<SetRiichiEventMsg>(() => new SetRiichiEventMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRiichiEventMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RabiRiichi.Generated.Events.InGame.SetRiichiEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRiichiEventMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRiichiEventMsg(SetRiichiEventMsg other) : this() {
      playerId_ = other.playerId_;
      riichiTile_ = other.riichiTile_ != null ? other.riichiTile_.Clone() : null;
      wRiichi_ = other.wRiichi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRiichiEventMsg Clone() {
      return new SetRiichiEventMsg(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "riichi_tile" field.</summary>
    public const int RiichiTileFieldNumber = 2;
    private global::RabiRiichi.Generated.Core.GameTileMsg riichiTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Core.GameTileMsg RiichiTile {
      get { return riichiTile_; }
      set {
        riichiTile_ = value;
      }
    }

    /// <summary>Field number for the "w_riichi" field.</summary>
    public const int WRiichiFieldNumber = 3;
    private bool wRiichi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WRiichi {
      get { return wRiichi_; }
      set {
        wRiichi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRiichiEventMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRiichiEventMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(RiichiTile, other.RiichiTile)) return false;
      if (WRiichi != other.WRiichi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (riichiTile_ != null) hash ^= RiichiTile.GetHashCode();
      if (WRiichi != false) hash ^= WRiichi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (riichiTile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RiichiTile);
      }
      if (WRiichi != false) {
        output.WriteRawTag(24);
        output.WriteBool(WRiichi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (riichiTile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RiichiTile);
      }
      if (WRiichi != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRiichiEventMsg other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.riichiTile_ != null) {
        if (riichiTile_ == null) {
          riichiTile_ = new global::RabiRiichi.Generated.Core.GameTileMsg();
        }
        RiichiTile.MergeFrom(other.RiichiTile);
      }
      if (other.WRiichi != false) {
        WRiichi = other.WRiichi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (riichiTile_ == null) {
              riichiTile_ = new global::RabiRiichi.Generated.Core.GameTileMsg();
            }
            input.ReadMessage(riichiTile_);
            break;
          }
          case 24: {
            WRiichi = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
