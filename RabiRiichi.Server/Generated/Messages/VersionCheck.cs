// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Server/Messages/VersionCheck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RabiRiichi.Server.Generated.Messages {

  /// <summary>Holder for reflection information generated from Server/Messages/VersionCheck.proto</summary>
  public static partial class VersionCheckReflection {

    #region Descriptor
    /// <summary>File descriptor for Server/Messages/VersionCheck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VersionCheckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJTZXJ2ZXIvTWVzc2FnZXMvVmVyc2lvbkNoZWNrLnByb3RvIn8KFVNlcnZl",
            "clZlcnNpb25DaGVja01zZxIMCgRnYW1lGAEgASgJEhQKDGdhbWVfdmVyc2lv",
            "bhgCIAEoCRIOCgZzZXJ2ZXIYAyABKAkSFgoOc2VydmVyX3ZlcnNpb24YBCAB",
            "KAkSGgoSbWluX2NsaWVudF92ZXJzaW9uGAUgASgJIlsKFUNsaWVudFZlcnNp",
            "b25DaGVja01zZxIOCgZjbGllbnQYASABKAkSFgoOY2xpZW50X3ZlcnNpb24Y",
            "AiABKAkSGgoSbWluX3NlcnZlcl92ZXJzaW9uGAMgASgJQieqAiRSYWJpUmlp",
            "Y2hpLlNlcnZlci5HZW5lcmF0ZWQuTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RabiRiichi.Server.Generated.Messages.ServerVersionCheckMsg), global::RabiRiichi.Server.Generated.Messages.ServerVersionCheckMsg.Parser, new[]{ "Game", "GameVersion", "Server", "ServerVersion", "MinClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RabiRiichi.Server.Generated.Messages.ClientVersionCheckMsg), global::RabiRiichi.Server.Generated.Messages.ClientVersionCheckMsg.Parser, new[]{ "Client", "ClientVersion", "MinServerVersion" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ServerVersionCheckMsg : pb::IMessage<ServerVersionCheckMsg> {
    private static readonly pb::MessageParser<ServerVersionCheckMsg> _parser = new pb::MessageParser<ServerVersionCheckMsg>(() => new ServerVersionCheckMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerVersionCheckMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RabiRiichi.Server.Generated.Messages.VersionCheckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerVersionCheckMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerVersionCheckMsg(ServerVersionCheckMsg other) : this() {
      game_ = other.game_;
      gameVersion_ = other.gameVersion_;
      server_ = other.server_;
      serverVersion_ = other.serverVersion_;
      minClientVersion_ = other.minClientVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerVersionCheckMsg Clone() {
      return new ServerVersionCheckMsg(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private string game_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Game {
      get { return game_; }
      set {
        game_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_version" field.</summary>
    public const int GameVersionFieldNumber = 2;
    private string gameVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameVersion {
      get { return gameVersion_; }
      set {
        gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 3;
    private string server_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Server {
      get { return server_; }
      set {
        server_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_version" field.</summary>
    public const int ServerVersionFieldNumber = 4;
    private string serverVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerVersion {
      get { return serverVersion_; }
      set {
        serverVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_client_version" field.</summary>
    public const int MinClientVersionFieldNumber = 5;
    private string minClientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinClientVersion {
      get { return minClientVersion_; }
      set {
        minClientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerVersionCheckMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerVersionCheckMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (GameVersion != other.GameVersion) return false;
      if (Server != other.Server) return false;
      if (ServerVersion != other.ServerVersion) return false;
      if (MinClientVersion != other.MinClientVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game.Length != 0) hash ^= Game.GetHashCode();
      if (GameVersion.Length != 0) hash ^= GameVersion.GetHashCode();
      if (Server.Length != 0) hash ^= Server.GetHashCode();
      if (ServerVersion.Length != 0) hash ^= ServerVersion.GetHashCode();
      if (MinClientVersion.Length != 0) hash ^= MinClientVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Game);
      }
      if (GameVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameVersion);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Server);
      }
      if (ServerVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServerVersion);
      }
      if (MinClientVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MinClientVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Game);
      }
      if (GameVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
      }
      if (Server.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Server);
      }
      if (ServerVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerVersion);
      }
      if (MinClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MinClientVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerVersionCheckMsg other) {
      if (other == null) {
        return;
      }
      if (other.Game.Length != 0) {
        Game = other.Game;
      }
      if (other.GameVersion.Length != 0) {
        GameVersion = other.GameVersion;
      }
      if (other.Server.Length != 0) {
        Server = other.Server;
      }
      if (other.ServerVersion.Length != 0) {
        ServerVersion = other.ServerVersion;
      }
      if (other.MinClientVersion.Length != 0) {
        MinClientVersion = other.MinClientVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Game = input.ReadString();
            break;
          }
          case 18: {
            GameVersion = input.ReadString();
            break;
          }
          case 26: {
            Server = input.ReadString();
            break;
          }
          case 34: {
            ServerVersion = input.ReadString();
            break;
          }
          case 42: {
            MinClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientVersionCheckMsg : pb::IMessage<ClientVersionCheckMsg> {
    private static readonly pb::MessageParser<ClientVersionCheckMsg> _parser = new pb::MessageParser<ClientVersionCheckMsg>(() => new ClientVersionCheckMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientVersionCheckMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RabiRiichi.Server.Generated.Messages.VersionCheckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientVersionCheckMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientVersionCheckMsg(ClientVersionCheckMsg other) : this() {
      client_ = other.client_;
      clientVersion_ = other.clientVersion_;
      minServerVersion_ = other.minServerVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientVersionCheckMsg Clone() {
      return new ClientVersionCheckMsg(this);
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 1;
    private string client_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Client {
      get { return client_; }
      set {
        client_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_server_version" field.</summary>
    public const int MinServerVersionFieldNumber = 3;
    private string minServerVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinServerVersion {
      get { return minServerVersion_; }
      set {
        minServerVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientVersionCheckMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientVersionCheckMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Client != other.Client) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (MinServerVersion != other.MinServerVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Client.Length != 0) hash ^= Client.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (MinServerVersion.Length != 0) hash ^= MinServerVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Client.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Client);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (MinServerVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MinServerVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Client.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Client);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (MinServerVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MinServerVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientVersionCheckMsg other) {
      if (other == null) {
        return;
      }
      if (other.Client.Length != 0) {
        Client = other.Client;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.MinServerVersion.Length != 0) {
        MinServerVersion = other.MinServerVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Client = input.ReadString();
            break;
          }
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            MinServerVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
